# Enhanced Docker Compose for Performance and External PostgreSQL Support
# This extends the base configuration with performance optimizations

version: '3.8'

services:
  # Enhanced Nginx with CDN optimization
  nginx:
    image: nginx:alpine
    container_name: supabase-nginx-performance
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/supabase.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl/nginx:/etc/nginx/ssl:ro
      - ./cdn/nginx-cdn.conf:/etc/nginx/conf.d/cdn.conf:ro
      - nginx_cache:/var/cache/nginx
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    depends_on:
      - rest
      - auth
      - storage
      - realtime
      - meta
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: [ "CMD", "nginx", "-t" ]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - performance

  # Enhanced Redis with persistence and optimization
  redis:
    image: redis:7-alpine
    container_name: supabase-redis-performance
    command: |
      redis-server 
      --appendonly yes 
      --appendfsync everysec 
      --save 900 1 
      --save 300 10 
      --save 60 10000
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 0
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - performance

  # Enhanced REST API with connection pooling
  rest:
    image: postgrest/postgrest:latest
    container_name: supabase-rest-performance
    environment:
      # External database support
      - PGRST_DB_URI=${EXTERNAL_DB_URI:-postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_HOST:-db}:${DB_PORT:-5432}/${POSTGRES_DB}}
      - PGRST_DB_SCHEMA=${PGRST_DB_SCHEMA}
      - PGRST_DB_ANON_ROLE=${PGRST_DB_ANON_ROLE}
      - PGRST_JWT_SECRET=${JWT_SECRET}
      # Performance optimizations
      - PGRST_DB_POOL=${PGRST_DB_POOL:-20}
      - PGRST_DB_POOL_TIMEOUT=${PGRST_DB_POOL_TIMEOUT:-10}
      - PGRST_DB_PREPARED_STATEMENTS=true
      - PGRST_MAX_ROWS=${PGRST_MAX_ROWS:-1000}
      - PGRST_PRE_REQUEST_FUNC=pre_request
      # Caching headers
      - PGRST_DB_EXTRA_SEARCH_PATH=public,extensions
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1" ]
      interval: 20s
      timeout: 10s
      retries: 3
    profiles:
      - performance

  # Enhanced Auth service
  auth:
    image: supabase/gotrue:latest
    container_name: supabase-auth-performance
    environment:
      # External database support
      - GOTRUE_DB_DATABASE_URL=${EXTERNAL_DB_URI:-postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_HOST:-db}:${DB_PORT:-5432}/${POSTGRES_DB}?search_path=auth}
      - GOTRUE_API_HOST=0.0.0.0
      - GOTRUE_API_PORT=9999
      - GOTRUE_DB_DRIVER=postgres
      - GOTRUE_SITE_URL=${SITE_URL}
      - GOTRUE_URI_ALLOW_LIST=${ADDITIONAL_REDIRECT_URLS}
      - GOTRUE_JWT_AUD=authenticated
      - GOTRUE_JWT_EXP=${JWT_EXPIRY}
      - GOTRUE_JWT_SECRET=${JWT_SECRET}
      - GOTRUE_DISABLE_SIGNUP=${DISABLE_SIGNUP}
      - GOTRUE_MAILER_AUTOCONFIRM=${ENABLE_EMAIL_AUTOCONFIRM}
      # Performance optimizations
      - GOTRUE_DB_MAX_POOL_SIZE=10
      - GOTRUE_RATE_LIMIT_HEADER=X-RateLimit-Remaining
      # Redis session storage
      - GOTRUE_SESSIONS_REDIS_URL=redis://redis:6379/0
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9999/health || exit 1" ]
      interval: 20s
      timeout: 10s
      retries: 3
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - performance

  # Enhanced Storage service
  storage:
    image: supabase/storage-api:latest
    container_name: supabase-storage-performance
    environment:
      # External database support
      - DATABASE_URL=${EXTERNAL_DB_URI:-postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_HOST:-db}:${DB_PORT:-5432}/${POSTGRES_DB}}
      - PGOPTIONS=-c search_path=storage,public,extensions
      - FILE_SIZE_LIMIT=52428800
      - STORAGE_BACKEND=file
      - FILE_STORAGE_BACKEND_PATH=/var/lib/storage
      - TENANT_ID=stub
      - REGION=stub
      - GLOBAL_S3_BUCKET=stub
      - ANON_KEY=${ANON_KEY}
      - SERVICE_KEY=${SERVICE_ROLE_KEY}
      - POSTGREST_URL=http://rest:3000
      - PGRST_JWT_SECRET=${JWT_SECRET}
      # Performance optimizations
      - STORAGE_CACHE_CONTROL=public, max-age=3600
      - STORAGE_FILE_CACHE_CONTROL=public, max-age=31536000
      # Redis caching
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - storage_data:/var/lib/storage
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5000/status || exit 1" ]
      interval: 20s
      timeout: 10s
      retries: 3
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - performance

  # Enhanced Realtime service
  realtime:
    image: supabase/realtime:latest
    container_name: supabase-realtime-performance
    environment:
      # External database support
      - DATABASE_URL=${EXTERNAL_DB_URI:-postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_HOST:-db}:${DB_PORT:-5432}/${POSTGRES_DB}}
      - DB_HOST=${DB_HOST:-db}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - DB_AFTER_CONNECT_QUERY=SET search_path TO _realtime
      - API_JWT_SECRET=${JWT_SECRET}
      - FLY_ALLOC_ID=fly123
      - FLY_APP_NAME=realtime
      - SECRET_KEY_BASE=${REALTIME_SECRET_KEY_BASE}
      - ERL_AFLAGS=-proto_dist inet_tcp
      - ENABLE_TAILSCALE=false
      - DNS_NODES='["127.0.0.1"]'
      # Performance optimizations
      - MAX_CONNECTIONS=1000
      - DB_POOL_SIZE=10
      - PORT=4000
      # Redis for scaling
      - REDIS_URL=redis://redis:6379/2
    command: >
      sh -c "
        /app/bin/migrate && 
        /app/bin/realtime eval 'Realtime.Release.seeds(Realtime.Repo)' && 
        /app/bin/server"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
    healthcheck:
      test: [ "CMD-SHELL", "timeout 5s bash -c ':> /dev/tcp/127.0.0.1/4000' || exit 1" ]
      interval: 20s
      timeout: 10s
      retries: 3
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - performance

  # Enhanced Meta service
  meta:
    image: supabase/postgres-meta:latest
    container_name: supabase-meta-performance
    environment:
      # External database support
      - PG_META_DB_URL=${EXTERNAL_DB_URI:-postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_HOST:-db}:${DB_PORT:-5432}/${POSTGRES_DB}}
      - PG_META_PORT=8080
      - PG_META_DB_HOST=${DB_HOST:-db}
      - PG_META_DB_PORT=${DB_PORT:-5432}
      - PG_META_DB_NAME=${POSTGRES_DB}
      - PG_META_DB_USER=${POSTGRES_USER}
      - PG_META_DB_PASSWORD=${POSTGRES_PASSWORD}
      # Performance optimizations
      - PG_META_DB_POOL_SIZE=10
      - PG_META_DB_POOL_TIMEOUT=30
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1" ]
      interval: 20s
      timeout: 10s
      retries: 3
    profiles:
      - performance

  # Database service (disabled when using external)
  db:
    image: supabase/postgres:15.1.0.147
    container_name: supabase-db-performance
    environment:
      - POSTGRES_HOST=/var/run/postgresql
      - PGPORT=${POSTGRES_PORT}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATABASE=${POSTGRES_DB}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGUSER=${POSTGRES_USER}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_INITDB_ARGS=--auth-local=trust --auth-host=md5 --encoding=UTF8 --locale=C.UTF-8
      # Performance optimizations
      - POSTGRES_SHARED_BUFFERS=512MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=2GB
      - POSTGRES_WORK_MEM=8MB
      - POSTGRES_MAINTENANCE_WORK_MEM=128MB
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_WAL_BUFFERS=32MB
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_RANDOM_PAGE_COST=1.1
      - POSTGRES_EFFECTIVE_IO_CONCURRENCY=200
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_wal:/var/lib/postgresql/wal
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    ports:
      - "${POSTGRES_PORT}:5432"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - local-db

  # Performance monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: supabase-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: supabase-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource,postgres-datasource
    restart: unless-stopped
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  postgres_wal:
    driver: local
  storage_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: supabase-performance
    driver: bridge
